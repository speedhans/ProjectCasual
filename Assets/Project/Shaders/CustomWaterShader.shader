Shader "Custom/CustomWaterShader"
{
	Properties
	{
		_WaterColorA("WaterColorA", Color) = (0,0,0,0)
_WaterColorB("WaterColorB", Color) = (0,0,0,0)
_WaterAlpha("WaterAlpha ", Float) = 1
[NoScaleOffset] _NormalTex("NormalTex", 2D) = "white" {}
Vector1_45FDCCEB("NormalTile ", Float) = 0
_NormalStrength("NormalStrength ", Float) = 1
_Smoothness("Smoothness ", Float) = 0.5
_NormalSpeed("NormalSpeed ", Float) = 0
_WaveDirectionA("WaveDirectionA", Vector) = (-1,0,0,0)
_WaveDirectionB("WaveDirectionB", Vector) = (1,0.3,0,0)
_WaveTile("WaveTile", Vector) = (1,1,0,0)
_WaveScale("WaveScale ", Float) = 0
_WaveSpeed("WaveSpeed ", Float) = 0
_WaveStrength("WaveStrength ", Float) = 0
_FoamDistance("FoamDistance ", Float) = 0
_FoamStrength("FoamStrength ", Float) = 0
[NoScaleOffset] _FoamTex("FoamTex", 2D) = "white" {}
_FoamScale("FoamScale", Float) = 0
_Depth("Depth", Float) = 0
_DepthColor("DepthColor", Color) = (0,0,0,0)

	}
		SubShader
	{
		Tags
		{
			"RenderPipeline" = "LightweightPipeline"
			"RenderType" = "Opaque"
			"Queue" = "Transparent+0"
		}
		Pass
		{
			Tags{"LightMode" = "LightweightForward"}

			// Material options generated by graph

			Blend One Zero, One Zero

			Cull Back

			ZTest LEqual

			ZWrite On

			HLSLPROGRAM
		// Required to compile gles 2.0 with standard srp library
		#pragma prefer_hlslcc gles
		#pragma exclude_renderers d3d11_9x
		#pragma target 2.0

		// -------------------------------------
		// Lightweight Pipeline keywords
		#pragma multi_compile _ _MAIN_LIGHT_SHADOWS
		#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
		#pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
		#pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
		#pragma multi_compile _ _SHADOWS_SOFT
		#pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE

		// -------------------------------------
		// Unity defined keywords
		#pragma multi_compile _ DIRLIGHTMAP_COMBINED
		#pragma multi_compile _ LIGHTMAP_ON
		#pragma multi_compile_fog

		//--------------------------------------
		// GPU Instancing
		#pragma multi_compile_instancing

		#pragma vertex vert
		#pragma fragment frag

		// Defines generated by graph
		#define _NORMALMAP 1
		#define REQUIRE_DEPTH_TEXTURE

		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

		CBUFFER_START(UnityPerMaterial)
		float4 _WaterColorA;
		float4 _WaterColorB;
		float _WaterAlpha;
		float Vector1_45FDCCEB;
		float _NormalStrength;
		float _Smoothness;
		float _NormalSpeed;
		float2 _WaveDirectionA;
		float2 _WaveDirectionB;
		float2 _WaveTile;
		float _WaveScale;
		float _WaveSpeed;
		float _WaveStrength;
		float _FoamDistance;
		float _FoamStrength;
		float _FoamScale;
		float _Depth;
		float4 _DepthColor;
		CBUFFER_END

		TEXTURE2D(_NormalTex); SAMPLER(sampler_NormalTex); float4 _NormalTex_TexelSize;
		TEXTURE2D(_FoamTex); SAMPLER(sampler_FoamTex); float4 _FoamTex_TexelSize;
		SAMPLER(_SampleTexture2D_BC854478_Sampler_3_Linear_Repeat);
		SAMPLER(_SampleTexture2D_BB4FD43B_Sampler_3_Linear_Repeat);
		SAMPLER(_SampleTexture2D_30715237_Sampler_3_Linear_Repeat);
		struct VertexDescriptionInputs
		{
			float3 ObjectSpacePosition;
			float3 WorldSpacePosition;
			float3 TimeParameters;
		};

		struct SurfaceDescriptionInputs
		{
			float3 WorldSpaceNormal;
			float3 WorldSpaceViewDirection;
			float3 WorldSpacePosition;
			float4 ScreenPosition;
			half4 uv0;
			float3 TimeParameters;
		};


		void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
		{
			RGBA = float4(R, G, B, A);
			RGB = float3(R, G, B);
			RG = float2(R, G);
		}

		void Unity_Multiply_float(float2 A, float2 B, out float2 Out)
		{
			Out = A * B;
		}

		void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
		{
			Out = A / B;
		}

		void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
		{
			Out = UV * Tiling + Offset;
		}


	inline float Unity_SimpleNoise_RandomValue_float(float2 uv)
	{
		return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
	}

	inline float Unity_SimpleNnoise_Interpolate_float(float a, float b, float t)
	{
		return (1.0 - t) * a + (t * b);
	}


	inline float Unity_SimpleNoise_ValueNoise_float(float2 uv)
	{
		float2 i = floor(uv);
		float2 f = frac(uv);
		f = f * f * (3.0 - 2.0 * f);

		uv = abs(frac(uv) - 0.5);
		float2 c0 = i + float2(0.0, 0.0);
		float2 c1 = i + float2(1.0, 0.0);
		float2 c2 = i + float2(0.0, 1.0);
		float2 c3 = i + float2(1.0, 1.0);
		float r0 = Unity_SimpleNoise_RandomValue_float(c0);
		float r1 = Unity_SimpleNoise_RandomValue_float(c1);
		float r2 = Unity_SimpleNoise_RandomValue_float(c2);
		float r3 = Unity_SimpleNoise_RandomValue_float(c3);

		float bottomOfGrid = Unity_SimpleNnoise_Interpolate_float(r0, r1, f.x);
		float topOfGrid = Unity_SimpleNnoise_Interpolate_float(r2, r3, f.x);
		float t = Unity_SimpleNnoise_Interpolate_float(bottomOfGrid, topOfGrid, f.y);
		return t;
	}
		void Unity_SimpleNoise_float(float2 UV, float Scale, out float Out)
		{
			float t = 0.0;

			float freq = pow(2.0, float(0));
			float amp = pow(0.5, float(3 - 0));
			t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

			freq = pow(2.0, float(1));
			amp = pow(0.5, float(3 - 1));
			t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

			freq = pow(2.0, float(2));
			amp = pow(0.5, float(3 - 2));
			t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

			Out = t;
		}

		void Unity_Multiply_float(float A, float B, out float Out)
		{
			Out = A * B;
		}

		void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
		{
			Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
		}

		void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
		{
			Out = lerp(A, B, T);
		}

		void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
		{
			Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
		}

		void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
		{
			Out = normalize(float3(A.rg + B.rg, A.b * B.b));
		}

		void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
		{
			Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
		}

		void Unity_Subtract_float(float A, float B, out float Out)
		{
			Out = A - B;
		}

		void Unity_OneMinus_float(float In, out float Out)
		{
			Out = 1 - In;
		}

		void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
		{
			Out = A * B;
		}

		void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
		{
			Out = clamp(In, Min, Max);
		}

		struct VertexDescription
		{
			float3 Position;
		};

		VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
		{
			VertexDescription description = (VertexDescription)0;

			float3 objectpos = IN.ObjectSpacePosition;
			float3 worldpos = IN.WorldSpacePosition;

			float4 _Combine_RGBA;
			float3 _Combine_RGB;
			float2 _Combine_RG;
			Unity_Combine_float(worldpos.x, worldpos.z, 0, 0, _Combine_RGBA, _Combine_RGB, _Combine_RG);//Unity_Combine_float(worldpos.x, worldpos.z, 0, 0, _Combine_RGBA, _Combine_RGB, _Combine_RG);

			float2 multi1 = float2(1, 1) * _Combine_RG;

			float2 multi2 = multi1 * _WaveTile;

			float2 multi3 = (IN.TimeParameters.x.xx) * float2(1, 0);

			float2 divide1 = multi3 / float2(20, 20);

			float2 multi4 = divide1 * float2(_WaveSpeed, _WaveSpeed);

			float2 tileout1 = multi2 * float2 (1, 1) + multi4;

			float simplenois1;
			Unity_SimpleNoise_float(tileout1, _WaveScale, simplenois1);

			float multi5 = simplenois1 * _WaveStrength;

			description.Position = float3(objectpos.x, multi5, objectpos.z);
			return description;
		}

		struct SurfaceDescription
		{
			float3 Albedo;
			float3 Normal;
			float3 Emission;
			float Metallic;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
		};

		SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
		{
			SurfaceDescription surface = (SurfaceDescription)0;
			float4 _Property_8A6FC900_Out_0 = _WaterColorA;
			float4 _Property_17EE01D5_Out_0 = _WaterColorB;
			float _FresnelEffect_4944DED2_Out_3;
			Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, 1, _FresnelEffect_4944DED2_Out_3);
			float4 _Lerp_4A644E6B_Out_3;
			Unity_Lerp_float4(_Property_8A6FC900_Out_0, _Property_17EE01D5_Out_0, (_FresnelEffect_4944DED2_Out_3.xxxx), _Lerp_4A644E6B_Out_3);
			float _Split_7F747273_R_1 = IN.WorldSpacePosition[0];
			float _Split_7F747273_G_2 = IN.WorldSpacePosition[1];
			float _Split_7F747273_B_3 = IN.WorldSpacePosition[2];
			float _Split_7F747273_A_4 = 0;
			float4 _Combine_BE4ADA10_RGBA_4;
			float3 _Combine_BE4ADA10_RGB_5;
			float2 _Combine_BE4ADA10_RG_6;
			Unity_Combine_float(_Split_7F747273_R_1, _Split_7F747273_B_3, 0, 0, _Combine_BE4ADA10_RGBA_4, _Combine_BE4ADA10_RGB_5, _Combine_BE4ADA10_RG_6);
			float2 _Property_444566A2_Out_0 = _WaveDirectionA;
			float2 _Multiply_E060EDBD_Out_2;
			Unity_Multiply_float((IN.TimeParameters.x.xx), _Property_444566A2_Out_0, _Multiply_E060EDBD_Out_2);
			float _Vector1_3679FBC6_Out_0 = 20;
			float2 _Divide_4AB50D10_Out_2;
			Unity_Divide_float2(_Multiply_E060EDBD_Out_2, (_Vector1_3679FBC6_Out_0.xx), _Divide_4AB50D10_Out_2);
			float _Property_5236EDF7_Out_0 = _NormalSpeed;
			float2 _Multiply_98DBEBBA_Out_2;
			Unity_Multiply_float(_Divide_4AB50D10_Out_2, (_Property_5236EDF7_Out_0.xx), _Multiply_98DBEBBA_Out_2);
			float2 _TilingAndOffset_84F55EA2_Out_3;
			Unity_TilingAndOffset_float(_Combine_BE4ADA10_RG_6, float2 (1, 1), _Multiply_98DBEBBA_Out_2, _TilingAndOffset_84F55EA2_Out_3);
			float _Property_E05C4845_Out_0 = Vector1_45FDCCEB;
			float2 _Multiply_408990E1_Out_2;
			Unity_Multiply_float(_TilingAndOffset_84F55EA2_Out_3, (_Property_E05C4845_Out_0.xx), _Multiply_408990E1_Out_2);
			float4 _SampleTexture2D_BC854478_RGBA_0 = SAMPLE_TEXTURE2D(_NormalTex, sampler_NormalTex, _Multiply_408990E1_Out_2);
			_SampleTexture2D_BC854478_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_BC854478_RGBA_0);
			float _SampleTexture2D_BC854478_R_4 = _SampleTexture2D_BC854478_RGBA_0.r;
			float _SampleTexture2D_BC854478_G_5 = _SampleTexture2D_BC854478_RGBA_0.g;
			float _SampleTexture2D_BC854478_B_6 = _SampleTexture2D_BC854478_RGBA_0.b;
			float _SampleTexture2D_BC854478_A_7 = _SampleTexture2D_BC854478_RGBA_0.a;
			float _Property_6EB54AA1_Out_0 = _NormalStrength;
			float3 _NormalStrength_DCD69809_Out_2;
			Unity_NormalStrength_float((_SampleTexture2D_BC854478_RGBA_0.xyz), _Property_6EB54AA1_Out_0, _NormalStrength_DCD69809_Out_2);
			float2 _Property_7485F33C_Out_0 = _WaveDirectionB;
			float2 _Multiply_DFDF76C0_Out_2;
			Unity_Multiply_float((IN.TimeParameters.x.xx), _Property_7485F33C_Out_0, _Multiply_DFDF76C0_Out_2);
			float _Vector1_AFBF5595_Out_0 = 20;
			float2 _Divide_50267F81_Out_2;
			Unity_Divide_float2(_Multiply_DFDF76C0_Out_2, (_Vector1_AFBF5595_Out_0.xx), _Divide_50267F81_Out_2);
			float _Property_D1B4D721_Out_0 = _NormalSpeed;
			float2 _Multiply_60EFE6EB_Out_2;
			Unity_Multiply_float(_Divide_50267F81_Out_2, (_Property_D1B4D721_Out_0.xx), _Multiply_60EFE6EB_Out_2);
			float2 _TilingAndOffset_409BC33C_Out_3;
			Unity_TilingAndOffset_float(_Combine_BE4ADA10_RG_6, float2 (1, 1), _Multiply_60EFE6EB_Out_2, _TilingAndOffset_409BC33C_Out_3);
			float _Property_DC5C7F46_Out_0 = Vector1_45FDCCEB;
			float _Multiply_1C91C296_Out_2;
			Unity_Multiply_float(_Property_DC5C7F46_Out_0, 2, _Multiply_1C91C296_Out_2);
			float2 _Multiply_BA6D6D6B_Out_2;
			Unity_Multiply_float(_TilingAndOffset_409BC33C_Out_3, (_Multiply_1C91C296_Out_2.xx), _Multiply_BA6D6D6B_Out_2);
			float4 _SampleTexture2D_BB4FD43B_RGBA_0 = SAMPLE_TEXTURE2D(_NormalTex, sampler_NormalTex, _Multiply_BA6D6D6B_Out_2);
			_SampleTexture2D_BB4FD43B_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_BB4FD43B_RGBA_0);
			float _SampleTexture2D_BB4FD43B_R_4 = _SampleTexture2D_BB4FD43B_RGBA_0.r;
			float _SampleTexture2D_BB4FD43B_G_5 = _SampleTexture2D_BB4FD43B_RGBA_0.g;
			float _SampleTexture2D_BB4FD43B_B_6 = _SampleTexture2D_BB4FD43B_RGBA_0.b;
			float _SampleTexture2D_BB4FD43B_A_7 = _SampleTexture2D_BB4FD43B_RGBA_0.a;
			float3 _NormalStrength_215C196F_Out_2;
			Unity_NormalStrength_float((_SampleTexture2D_BB4FD43B_RGBA_0.xyz), _Property_6EB54AA1_Out_0, _NormalStrength_215C196F_Out_2);
			float3 _NormalBlend_2B6FCAA7_Out_2;
			Unity_NormalBlend_float(_NormalStrength_DCD69809_Out_2, _NormalStrength_215C196F_Out_2, _NormalBlend_2B6FCAA7_Out_2);
			float4 _SampleTexture2D_30715237_RGBA_0 = SAMPLE_TEXTURE2D(_FoamTex, sampler_FoamTex, IN.uv0.xy * _FoamScale);
			float _SampleTexture2D_30715237_R_4 = _SampleTexture2D_30715237_RGBA_0.r;
			float _SampleTexture2D_30715237_G_5 = _SampleTexture2D_30715237_RGBA_0.g;
			float _SampleTexture2D_30715237_B_6 = _SampleTexture2D_30715237_RGBA_0.b;
			float _SampleTexture2D_30715237_A_7 = _SampleTexture2D_30715237_RGBA_0.a;
			float _SceneDepth_8C01628F_Out_1;
			Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_8C01628F_Out_1);
			float _Multiply_D0020014_Out_2;
			Unity_Multiply_float(_SceneDepth_8C01628F_Out_1, _ProjectionParams.z, _Multiply_D0020014_Out_2);
			float4 _ScreenPosition_5EA64279_Out_0 = IN.ScreenPosition;
			float _Split_DC81A435_R_1 = _ScreenPosition_5EA64279_Out_0[0];
			float _Split_DC81A435_G_2 = _ScreenPosition_5EA64279_Out_0[1];
			float _Split_DC81A435_B_3 = _ScreenPosition_5EA64279_Out_0[2];
			float _Split_DC81A435_A_4 = _ScreenPosition_5EA64279_Out_0[3];
			float _Property_64322247_Out_0 = _FoamDistance;
			float _Subtract_16D4CE39_Out_2;
			Unity_Subtract_float(_Split_DC81A435_A_4, _Property_64322247_Out_0, _Subtract_16D4CE39_Out_2);
			float _Subtract_B207AE67_Out_2;
			Unity_Subtract_float(_Multiply_D0020014_Out_2, _Subtract_16D4CE39_Out_2, _Subtract_B207AE67_Out_2);
			float _OneMinus_F58C9A96_Out_1;
			Unity_OneMinus_float(_Subtract_B207AE67_Out_2, _OneMinus_F58C9A96_Out_1);
			float _Property_526C56FE_Out_0 = _FoamStrength;
			float _Multiply_D4840389_Out_2;
			Unity_Multiply_float(_OneMinus_F58C9A96_Out_1, _Property_526C56FE_Out_0, _Multiply_D4840389_Out_2);
			float4 _Multiply_F6163FDB_Out_2;
			Unity_Multiply_float(_SampleTexture2D_30715237_RGBA_0, (_Multiply_D4840389_Out_2.xxxx), _Multiply_F6163FDB_Out_2);
			float4 _Clamp_78B0D50D_Out_3;
			Unity_Clamp_float4(_Multiply_F6163FDB_Out_2, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_78B0D50D_Out_3);
			float _Property_8427BE3_Out_0 = _Smoothness;
			float _Property_F2D00367_Out_0 = _WaterAlpha;

			surface.Albedo = lerp(_DepthColor.xyz, _Lerp_4A644E6B_Out_3.xyz, clamp(_Multiply_D0020014_Out_2 - (IN.ScreenPosition.w - _Depth), 0, 1));//(_Lerp_4A644E6B_Out_3.xyz);
			surface.Normal = _NormalBlend_2B6FCAA7_Out_2;
			surface.Emission = (_Clamp_78B0D50D_Out_3.xyz);
			surface.Metallic = 0;
			surface.Smoothness = _Property_8427BE3_Out_0;
			surface.Occlusion = 1;
			surface.Alpha = _Property_F2D00367_Out_0;
			surface.AlphaClipThreshold = 0.5;
			return surface;
		}

		struct GraphVertexInput
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			float4 tangent : TANGENT;
			float4 texcoord0 : TEXCOORD0;
			float4 texcoord1 : TEXCOORD1;
			UNITY_VERTEX_INPUT_INSTANCE_ID
		};


		struct GraphVertexOutput
		{
			float4 clipPos                : SV_POSITION;
			DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 0);
			half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
			float4 shadowCoord            : TEXCOORD2;

			// Interpolators defined by graph
			float3 WorldSpacePosition : TEXCOORD3;
			float3 WorldSpaceNormal : TEXCOORD4;
			float3 WorldSpaceTangent : TEXCOORD5;
			float3 WorldSpaceBiTangent : TEXCOORD6;
			float3 WorldSpaceViewDirection : TEXCOORD7;
			float4 ScreenPosition : TEXCOORD8;
			half4 uv0 : TEXCOORD9;
			half4 uv1 : TEXCOORD10;

			UNITY_VERTEX_INPUT_INSTANCE_ID
			UNITY_VERTEX_OUTPUT_STEREO
		};

		GraphVertexOutput vert(GraphVertexInput v)
		{
			GraphVertexOutput o = (GraphVertexOutput)0;
			UNITY_SETUP_INSTANCE_ID(v);
			UNITY_TRANSFER_INSTANCE_ID(v, o);
			UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

			VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

			float3 WorldSpacePosition = mul(UNITY_MATRIX_M, v.vertex).xyz;
			// Vertex description inputs defined by graph
			vdi.ObjectSpacePosition = v.vertex.xyz;
			vdi.WorldSpacePosition = WorldSpacePosition;//WorldSpacePosition;
			vdi.TimeParameters = _TimeParameters.xyz;

			VertexDescription vd = PopulateVertexData(vdi);
			v.vertex.xyz = vd.Position;

			// Vertex transformations performed by graph
			float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
			float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
			float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
			float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
			float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
			float4 uv0 = v.texcoord0;
			float4 uv1 = v.texcoord1;

			// Vertex shader outputs defined by graph
			o.WorldSpacePosition = WorldSpacePosition;
			o.WorldSpaceNormal = WorldSpaceNormal;
			o.WorldSpaceTangent = WorldSpaceTangent;
			o.WorldSpaceBiTangent = WorldSpaceBiTangent;
			o.WorldSpaceViewDirection = WorldSpaceViewDirection;
			o.ScreenPosition = ScreenPosition;
			o.uv0 = uv0;
			o.uv1 = uv1;

			float3 lwWNormal = TransformObjectToWorldNormal(v.normal);

			VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);

			// We either sample GI from lightmap or SH.
			// Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
			// see DECLARE_LIGHTMAP_OR_SH macro.
			// The following funcions initialize the correct variable with correct data
			OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUV);
			OUTPUT_SH(lwWNormal, o.vertexSH);

			half3 vertexLight = VertexLighting(vertexInput.positionWS, lwWNormal);
			half fogFactor = ComputeFogFactor(vertexInput.positionCS.z);
			o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
			o.clipPos = vertexInput.positionCS;

		#ifdef _MAIN_LIGHT_SHADOWS
			o.shadowCoord = GetShadowCoord(vertexInput);
		#endif
			return o;
		}

		half4 frag(GraphVertexOutput IN) : SV_Target
		{
			UNITY_SETUP_INSTANCE_ID(IN);
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

			// Pixel transformations performed by graph
			float3 WorldSpacePosition = IN.WorldSpacePosition;
			float3 WorldSpaceNormal = IN.WorldSpaceNormal;
			float3 WorldSpaceTangent = IN.WorldSpaceTangent;
			float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			float4 ScreenPosition = IN.ScreenPosition;
			float4 uv0 = IN.uv0;
			float4 uv1 = IN.uv1;

			SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

			// Surface description inputs defined by graph
			surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
			surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
			surfaceInput.WorldSpacePosition = WorldSpacePosition;
			surfaceInput.ScreenPosition = ScreenPosition;
			surfaceInput.uv0 = uv0;
			surfaceInput.TimeParameters = _TimeParameters.xyz;

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			float3 Albedo = float3(0.5, 0.5, 0.5);
			float3 Specular = float3(0, 0, 0);
			float Metallic = 1;
			float3 Normal = float3(0, 0, 1);
			float3 Emission = 0;
			float Smoothness = 0.5;
			float Occlusion = 1;
			float Alpha = 1;
			float AlphaClipThreshold = 0;

			// Surface description remap performed by graph
			Albedo = surf.Albedo;
			Normal = surf.Normal;
			Emission = surf.Emission;
			Metallic = surf.Metallic;
			Smoothness = surf.Smoothness;
			Occlusion = surf.Occlusion;
			Alpha = surf.Alpha;
			AlphaClipThreshold = surf.AlphaClipThreshold;

			InputData inputData;
			inputData.positionWS = WorldSpacePosition;

	#ifdef _NORMALMAP
			inputData.normalWS = normalize(TransformTangentToWorld(Normal, half3x3(WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal)));
	#else
		#if !SHADER_HINT_NICE_QUALITY
			inputData.normalWS = WorldSpaceNormal;
		#else
			inputData.normalWS = normalize(WorldSpaceNormal);
		#endif
	#endif

	#if !SHADER_HINT_NICE_QUALITY
			// viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
			inputData.viewDirectionWS = WorldSpaceViewDirection;
	#else
			inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
	#endif

			inputData.shadowCoord = IN.shadowCoord;

			inputData.fogCoord = IN.fogFactorAndVertexLight.x;
			inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
			inputData.bakedGI = SAMPLE_GI(IN.lightmapUV, IN.vertexSH, inputData.normalWS);

			half4 color = LightweightFragmentPBR(
				inputData,
				Albedo,
				Metallic,
				Specular,
				Smoothness,
				Occlusion,
				Emission,
				Alpha);

			// Computes fog factor per-vertex
			color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);

	#if _AlphaClip
			clip(Alpha - AlphaClipThreshold);
	#endif
			return color;
		}

		ENDHLSL
	}
	Pass
	{
		Name "ShadowCaster"
		Tags{"LightMode" = "ShadowCaster"}

		ZWrite On ZTest LEqual

			// Material options generated by graph
			Cull Back

			HLSLPROGRAM
			// Required to compile gles 2.0 with standard srp library
			#pragma prefer_hlslcc gles
			#pragma exclude_renderers d3d11_9x
			#pragma target 2.0

			//--------------------------------------
			// GPU Instancing
			#pragma multi_compile_instancing

			#pragma vertex ShadowPassVertex
			#pragma fragment ShadowPassFragment

			// Defines generated by graph
			#define _NORMALMAP 1
			#define REQUIRE_DEPTH_TEXTURE

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			CBUFFER_START(UnityPerMaterial)
			float4 _WaterColorA;
			float4 _WaterColorB;
			float _WaterAlpha;
			float Vector1_45FDCCEB;
			float _NormalStrength;
			float _Smoothness;
			float _NormalSpeed;
			float2 _WaveDirectionA;
			float2 _WaveDirectionB;
			float2 _WaveTile;
			float _WaveScale;
			float _WaveSpeed;
			float _WaveStrength;
			float _FoamDistance;
			float _FoamStrength;
			float _Depth;
			float4 _DepthColor;
			CBUFFER_END

			TEXTURE2D(_NormalTex); SAMPLER(sampler_NormalTex); float4 _NormalTex_TexelSize;
			TEXTURE2D(_FoamTex); SAMPLER(sampler_FoamTex); float4 _FoamTex_TexelSize;
			SAMPLER(_SampleTexture2D_30715237_Sampler_3_Linear_Repeat);
			struct VertexDescriptionInputs
			{
				float3 ObjectSpacePosition;
				float3 WorldSpacePosition;
				float3 TimeParameters;
			};

			struct SurfaceDescriptionInputs
			{
				float3 WorldSpaceNormal;
				float3 WorldSpaceViewDirection;
				float4 ScreenPosition;
				half4 uv0;
			};


			void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
			{
				RGBA = float4(R, G, B, A);
				RGB = float3(R, G, B);
				RG = float2(R, G);
			}

			void Unity_Multiply_float(float2 A, float2 B, out float2 Out)
			{
				Out = A * B;
			}

			void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
			{
				Out = A / B;
			}

			void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
			{
				Out = UV * Tiling + Offset;
			}


		inline float Unity_SimpleNoise_RandomValue_float(float2 uv)
		{
			return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
		}

		inline float Unity_SimpleNnoise_Interpolate_float(float a, float b, float t)
		{
			return (1.0 - t) * a + (t * b);
		}


		inline float Unity_SimpleNoise_ValueNoise_float(float2 uv)
		{
			float2 i = floor(uv);
			float2 f = frac(uv);
			f = f * f * (3.0 - 2.0 * f);

			uv = abs(frac(uv) - 0.5);
			float2 c0 = i + float2(0.0, 0.0);
			float2 c1 = i + float2(1.0, 0.0);
			float2 c2 = i + float2(0.0, 1.0);
			float2 c3 = i + float2(1.0, 1.0);
			float r0 = Unity_SimpleNoise_RandomValue_float(c0);
			float r1 = Unity_SimpleNoise_RandomValue_float(c1);
			float r2 = Unity_SimpleNoise_RandomValue_float(c2);
			float r3 = Unity_SimpleNoise_RandomValue_float(c3);

			float bottomOfGrid = Unity_SimpleNnoise_Interpolate_float(r0, r1, f.x);
			float topOfGrid = Unity_SimpleNnoise_Interpolate_float(r2, r3, f.x);
			float t = Unity_SimpleNnoise_Interpolate_float(bottomOfGrid, topOfGrid, f.y);
			return t;
		}
			void Unity_SimpleNoise_float(float2 UV, float Scale, out float Out)
			{
				float t = 0.0;

				float freq = pow(2.0, float(0));
				float amp = pow(0.5, float(3 - 0));
				t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

				freq = pow(2.0, float(1));
				amp = pow(0.5, float(3 - 1));
				t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

				freq = pow(2.0, float(2));
				amp = pow(0.5, float(3 - 2));
				t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

				Out = t;
			}

			void Unity_Multiply_float(float A, float B, out float Out)
			{
				Out = A * B;
			}

			void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
			{
				Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
			}

			void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
			{
				Out = lerp(A, B, T);
			}

			void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
			{
				Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
			}

			void Unity_Subtract_float(float A, float B, out float Out)
			{
				Out = A - B;
			}

			void Unity_OneMinus_float(float In, out float Out)
			{
				Out = 1 - In;
			}

			void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
			{
				Out = A * B;
			}

			void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
			{
				Out = clamp(In, Min, Max);
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;

				float3 objectpos = IN.ObjectSpacePosition;
				float3 worldpos = IN.WorldSpacePosition;

				float4 _Combine_RGBA;
				float3 _Combine_RGB;
				float2 _Combine_RG;
				Unity_Combine_float(worldpos.x, worldpos.z, 0, 0, _Combine_RGBA, _Combine_RGB, _Combine_RG);//Unity_Combine_float(worldpos.x, worldpos.z, 0, 0, _Combine_RGBA, _Combine_RGB, _Combine_RG);

				float2 multi1 = float2(1, 1) * _Combine_RG;

				float2 multi2 = multi1 * _WaveTile;

				float2 multi3 = (IN.TimeParameters.x.xx) * float2(1, 0);

				float2 divide1 = multi3 / float2(20, 20);

				float2 multi4 = divide1 * float2(_WaveSpeed, _WaveSpeed);

				float2 tileout1 = multi2 * float2 (1, 1) + multi4;

				float simplenois1;
				Unity_SimpleNoise_float(tileout1, _WaveScale, simplenois1);

				float multi5 = simplenois1 * _WaveStrength;

				description.Position = float3(objectpos.x, multi5, objectpos.z);
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Emission;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float4 _Property_8A6FC900_Out_0 = _WaterColorA;
				float4 _Property_17EE01D5_Out_0 = _WaterColorB;
				float _FresnelEffect_4944DED2_Out_3;
				Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, 1, _FresnelEffect_4944DED2_Out_3);
				float4 _Lerp_4A644E6B_Out_3;
				Unity_Lerp_float4(_Property_8A6FC900_Out_0, _Property_17EE01D5_Out_0, (_FresnelEffect_4944DED2_Out_3.xxxx), _Lerp_4A644E6B_Out_3);
				float4 _SampleTexture2D_30715237_RGBA_0 = SAMPLE_TEXTURE2D(_FoamTex, sampler_FoamTex, IN.uv0.xy);
				float _SampleTexture2D_30715237_R_4 = _SampleTexture2D_30715237_RGBA_0.r;
				float _SampleTexture2D_30715237_G_5 = _SampleTexture2D_30715237_RGBA_0.g;
				float _SampleTexture2D_30715237_B_6 = _SampleTexture2D_30715237_RGBA_0.b;
				float _SampleTexture2D_30715237_A_7 = _SampleTexture2D_30715237_RGBA_0.a;
				float _SceneDepth_8C01628F_Out_1;
				Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_8C01628F_Out_1);
				float _Multiply_D0020014_Out_2;
				Unity_Multiply_float(_SceneDepth_8C01628F_Out_1, _ProjectionParams.z, _Multiply_D0020014_Out_2);
				float4 _ScreenPosition_5EA64279_Out_0 = IN.ScreenPosition;
				float _Split_DC81A435_R_1 = _ScreenPosition_5EA64279_Out_0[0];
				float _Split_DC81A435_G_2 = _ScreenPosition_5EA64279_Out_0[1];
				float _Split_DC81A435_B_3 = _ScreenPosition_5EA64279_Out_0[2];
				float _Split_DC81A435_A_4 = _ScreenPosition_5EA64279_Out_0[3];
				float _Property_64322247_Out_0 = _FoamDistance;
				float _Subtract_16D4CE39_Out_2;
				Unity_Subtract_float(_Split_DC81A435_A_4, _Property_64322247_Out_0, _Subtract_16D4CE39_Out_2);
				float _Subtract_B207AE67_Out_2;
				Unity_Subtract_float(_Multiply_D0020014_Out_2, _Subtract_16D4CE39_Out_2, _Subtract_B207AE67_Out_2);
				float _OneMinus_F58C9A96_Out_1;
				Unity_OneMinus_float(_Subtract_B207AE67_Out_2, _OneMinus_F58C9A96_Out_1);
				float _Property_526C56FE_Out_0 = _FoamStrength;
				float _Multiply_D4840389_Out_2;
				Unity_Multiply_float(_OneMinus_F58C9A96_Out_1, _Property_526C56FE_Out_0, _Multiply_D4840389_Out_2);
				float4 _Multiply_F6163FDB_Out_2;
				Unity_Multiply_float(_SampleTexture2D_30715237_RGBA_0, (_Multiply_D4840389_Out_2.xxxx), _Multiply_F6163FDB_Out_2);
				float4 _Clamp_78B0D50D_Out_3;
				Unity_Clamp_float4(_Multiply_F6163FDB_Out_2, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_78B0D50D_Out_3);
				float _Property_F2D00367_Out_0 = _WaterAlpha;
				surface.Albedo = (_Lerp_4A644E6B_Out_3.xyz);
				surface.Emission = (_Clamp_78B0D50D_Out_3.xyz);
				surface.Alpha = _Property_F2D00367_Out_0;
				surface.AlphaClipThreshold = 0.5;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord0 : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct VertexOutput
			{
				float2 uv           : TEXCOORD0;
				float4 clipPos      : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				float4 ScreenPosition : TEXCOORD8;
				half4 uv0 : TEXCOORD9;
				half4 uv1 : TEXCOORD10;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			float3 _LightDirection;

			VertexOutput ShadowPassVertex(GraphVertexInput v)
			{
				VertexOutput o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);

				VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

				float3 WorldSpacePosition = mul(UNITY_MATRIX_M, v.vertex).xyz;
				// Vertex description inputs defined by graph
				vdi.ObjectSpacePosition = v.vertex.xyz;
				vdi.WorldSpacePosition = WorldSpacePosition;//WorldSpacePosition;
				vdi.TimeParameters = _TimeParameters.xyz;

				VertexDescription vd = PopulateVertexData(vdi);
				v.vertex.xyz = vd.Position;

				// Vertex transformations performed by graph
				float3 WorldSpaceNormal = normalize(mul(v.normal, (float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M, v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
				float4 uv0 = v.texcoord0;
				float4 uv1 = v.texcoord1;

				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.ScreenPosition = ScreenPosition;
				o.uv0 = uv0;
				o.uv1 = uv1;


				float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
				float3 normalWS = TransformObjectToWorldNormal(v.normal);

				float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

			#if UNITY_REVERSED_Z
				clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
			#else
				clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
			#endif
				o.clipPos = clipPos;

				return o;
			}

			half4 ShadowPassFragment(VertexOutput IN) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);

			// Pixel transformations performed by graph
			float3 WorldSpacePosition = IN.WorldSpacePosition;
			float3 WorldSpaceNormal = IN.WorldSpaceNormal;
			float3 WorldSpaceTangent = IN.WorldSpaceTangent;
			float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			float4 ScreenPosition = IN.ScreenPosition;
			float4 uv0 = IN.uv0;
			float4 uv1 = IN.uv1;

			SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

			// Surface description inputs defined by graph
			surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
			surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
			surfaceInput.ScreenPosition = ScreenPosition;
			surfaceInput.uv0 = uv0;

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			float3 Albedo = float3(0.5, 0.5, 0.5);
			float3 Emission = 0;
			float Alpha = 1;
			float AlphaClipThreshold = 0;

			// Surface description remap performed by graph
			Albedo = surf.Albedo;
			Emission = surf.Emission;
			Alpha = surf.Alpha;
			AlphaClipThreshold = surf.AlphaClipThreshold;

	 #if _AlphaClip
			clip(Alpha - AlphaClipThreshold);
	#endif
			return 0;
		}

		ENDHLSL
	}

	Pass
	{
		Name "DepthOnly"
		Tags{"LightMode" = "DepthOnly"}

		ZWrite On
		ColorMask 0

			// Material options generated by graph
			Cull Back

			HLSLPROGRAM
			// Required to compile gles 2.0 with standard srp library
			#pragma prefer_hlslcc gles
			#pragma exclude_renderers d3d11_9x
			#pragma target 2.0

			//--------------------------------------
			// GPU Instancing
			#pragma multi_compile_instancing

			#pragma vertex vert
			#pragma fragment frag

			// Defines generated by graph
			#define _NORMALMAP 1
			#define REQUIRE_DEPTH_TEXTURE

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			CBUFFER_START(UnityPerMaterial)
			float4 _WaterColorA;
			float4 _WaterColorB;
			float _WaterAlpha;
			float Vector1_45FDCCEB;
			float _NormalStrength;
			float _Smoothness;
			float _NormalSpeed;
			float2 _WaveDirectionA;
			float2 _WaveDirectionB;
			float2 _WaveTile;
			float _WaveScale;
			float _WaveSpeed;
			float _WaveStrength;
			float _FoamDistance;
			float _FoamStrength;
			float _Depth;
			float4 _DepthColor;
			CBUFFER_END

			TEXTURE2D(_NormalTex); SAMPLER(sampler_NormalTex); float4 _NormalTex_TexelSize;
			TEXTURE2D(_FoamTex); SAMPLER(sampler_FoamTex); float4 _FoamTex_TexelSize;
			SAMPLER(_SampleTexture2D_30715237_Sampler_3_Linear_Repeat);
			struct VertexDescriptionInputs
			{
				float3 ObjectSpacePosition;
				float3 WorldSpacePosition;
				float3 TimeParameters;
			};

			struct SurfaceDescriptionInputs
			{
				float3 WorldSpaceNormal;
				float3 WorldSpaceViewDirection;
				float4 ScreenPosition;
				half4 uv0;
			};


			void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
			{
				RGBA = float4(R, G, B, A);
				RGB = float3(R, G, B);
				RG = float2(R, G);
			}

			void Unity_Multiply_float(float2 A, float2 B, out float2 Out)
			{
				Out = A * B;
			}

			void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
			{
				Out = A / B;
			}

			void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
			{
				Out = UV * Tiling + Offset;
			}


		inline float Unity_SimpleNoise_RandomValue_float(float2 uv)
		{
			return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
		}

		inline float Unity_SimpleNnoise_Interpolate_float(float a, float b, float t)
		{
			return (1.0 - t) * a + (t * b);
		}


		inline float Unity_SimpleNoise_ValueNoise_float(float2 uv)
		{
			float2 i = floor(uv);
			float2 f = frac(uv);
			f = f * f * (3.0 - 2.0 * f);

			uv = abs(frac(uv) - 0.5);
			float2 c0 = i + float2(0.0, 0.0);
			float2 c1 = i + float2(1.0, 0.0);
			float2 c2 = i + float2(0.0, 1.0);
			float2 c3 = i + float2(1.0, 1.0);
			float r0 = Unity_SimpleNoise_RandomValue_float(c0);
			float r1 = Unity_SimpleNoise_RandomValue_float(c1);
			float r2 = Unity_SimpleNoise_RandomValue_float(c2);
			float r3 = Unity_SimpleNoise_RandomValue_float(c3);

			float bottomOfGrid = Unity_SimpleNnoise_Interpolate_float(r0, r1, f.x);
			float topOfGrid = Unity_SimpleNnoise_Interpolate_float(r2, r3, f.x);
			float t = Unity_SimpleNnoise_Interpolate_float(bottomOfGrid, topOfGrid, f.y);
			return t;
		}
			void Unity_SimpleNoise_float(float2 UV, float Scale, out float Out)
			{
				float t = 0.0;

				float freq = pow(2.0, float(0));
				float amp = pow(0.5, float(3 - 0));
				t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

				freq = pow(2.0, float(1));
				amp = pow(0.5, float(3 - 1));
				t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

				freq = pow(2.0, float(2));
				amp = pow(0.5, float(3 - 2));
				t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

				Out = t;
			}

			void Unity_Multiply_float(float A, float B, out float Out)
			{
				Out = A * B;
			}

			void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
			{
				Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
			}

			void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
			{
				Out = lerp(A, B, T);
			}

			void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
			{
				Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
			}

			void Unity_Subtract_float(float A, float B, out float Out)
			{
				Out = A - B;
			}

			void Unity_OneMinus_float(float In, out float Out)
			{
				Out = 1 - In;
			}

			void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
			{
				Out = A * B;
			}

			void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
			{
				Out = clamp(In, Min, Max);
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;

				float3 objectpos = IN.ObjectSpacePosition;
				float3 worldpos = IN.WorldSpacePosition;

				float4 _Combine_RGBA;
				float3 _Combine_RGB;
				float2 _Combine_RG;
				Unity_Combine_float(worldpos.x, worldpos.z, 0, 0, _Combine_RGBA, _Combine_RGB, _Combine_RG);//Unity_Combine_float(worldpos.x, worldpos.z, 0, 0, _Combine_RGBA, _Combine_RGB, _Combine_RG);

				float2 multi1 = float2(1, 1) * _Combine_RG;

				float2 multi2 = multi1 * _WaveTile;

				float2 multi3 = (IN.TimeParameters.x.xx) * float2(1,0);

				float2 divide1 = multi3 / float2(20, 20);

				float2 multi4 = divide1 * float2(_WaveSpeed, _WaveSpeed);

				float2 tileout1 = multi2 * float2 (1, 1) + multi4;

				float simplenois1;
				Unity_SimpleNoise_float(tileout1, _WaveScale, simplenois1);

				float multi5 = simplenois1 * _WaveStrength;

				description.Position = float3(objectpos.x, sin(IN.TimeParameters.x), objectpos.z);//multi5, objectpos.z);
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Emission;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float4 _Property_8A6FC900_Out_0 = _WaterColorA;
				float4 _Property_17EE01D5_Out_0 = _WaterColorB;
				float _FresnelEffect_4944DED2_Out_3;
				Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, 1, _FresnelEffect_4944DED2_Out_3);
				float4 _Lerp_4A644E6B_Out_3;
				Unity_Lerp_float4(_Property_8A6FC900_Out_0, _Property_17EE01D5_Out_0, (_FresnelEffect_4944DED2_Out_3.xxxx), _Lerp_4A644E6B_Out_3);
				float4 _SampleTexture2D_30715237_RGBA_0 = SAMPLE_TEXTURE2D(_FoamTex, sampler_FoamTex, IN.uv0.xy);
				float _SampleTexture2D_30715237_R_4 = _SampleTexture2D_30715237_RGBA_0.r;
				float _SampleTexture2D_30715237_G_5 = _SampleTexture2D_30715237_RGBA_0.g;
				float _SampleTexture2D_30715237_B_6 = _SampleTexture2D_30715237_RGBA_0.b;
				float _SampleTexture2D_30715237_A_7 = _SampleTexture2D_30715237_RGBA_0.a;
				float _SceneDepth_8C01628F_Out_1;
				Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_8C01628F_Out_1);
				float _Multiply_D0020014_Out_2;
				Unity_Multiply_float(_SceneDepth_8C01628F_Out_1, _ProjectionParams.z, _Multiply_D0020014_Out_2);
				float4 _ScreenPosition_5EA64279_Out_0 = IN.ScreenPosition;
				float _Split_DC81A435_R_1 = _ScreenPosition_5EA64279_Out_0[0];
				float _Split_DC81A435_G_2 = _ScreenPosition_5EA64279_Out_0[1];
				float _Split_DC81A435_B_3 = _ScreenPosition_5EA64279_Out_0[2];
				float _Split_DC81A435_A_4 = _ScreenPosition_5EA64279_Out_0[3];
				float _Property_64322247_Out_0 = _FoamDistance;
				float _Subtract_16D4CE39_Out_2;
				Unity_Subtract_float(_Split_DC81A435_A_4, _Property_64322247_Out_0, _Subtract_16D4CE39_Out_2);
				float _Subtract_B207AE67_Out_2;
				Unity_Subtract_float(_Multiply_D0020014_Out_2, _Subtract_16D4CE39_Out_2, _Subtract_B207AE67_Out_2);
				float _OneMinus_F58C9A96_Out_1;
				Unity_OneMinus_float(_Subtract_B207AE67_Out_2, _OneMinus_F58C9A96_Out_1);
				float _Property_526C56FE_Out_0 = _FoamStrength;
				float _Multiply_D4840389_Out_2;
				Unity_Multiply_float(_OneMinus_F58C9A96_Out_1, _Property_526C56FE_Out_0, _Multiply_D4840389_Out_2);
				float4 _Multiply_F6163FDB_Out_2;
				Unity_Multiply_float(_SampleTexture2D_30715237_RGBA_0, (_Multiply_D4840389_Out_2.xxxx), _Multiply_F6163FDB_Out_2);
				float4 _Clamp_78B0D50D_Out_3;
				Unity_Clamp_float4(_Multiply_F6163FDB_Out_2, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_78B0D50D_Out_3);
				float _Property_F2D00367_Out_0 = _WaterAlpha;
				surface.Albedo = (_Lerp_4A644E6B_Out_3.xyz);
				surface.Emission = (_Clamp_78B0D50D_Out_3.xyz);
				surface.Alpha = _Property_F2D00367_Out_0;
				surface.AlphaClipThreshold = 0.5;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord0 : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct VertexOutput
			{
				float2 uv           : TEXCOORD0;
				float4 clipPos      : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				float4 ScreenPosition : TEXCOORD8;
				half4 uv0 : TEXCOORD9;
				half4 uv1 : TEXCOORD10;

				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			VertexOutput vert(GraphVertexInput v)
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				//////////////
				VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

				float3 WorldSpacePosition = mul(UNITY_MATRIX_M, v.vertex).xyz;
				// Vertex description inputs defined by graph
				vdi.ObjectSpacePosition = v.vertex.xyz;
				vdi.WorldSpacePosition = WorldSpacePosition;//WorldSpacePosition;
				vdi.TimeParameters = _TimeParameters.xyz;

				VertexDescription vd = PopulateVertexData(vdi);
				v.vertex.xyz = vd.Position;

				// Vertex transformations performed by graph
				float3 WorldSpaceNormal = normalize(mul(v.normal, (float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M, v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
				float4 uv0 = v.texcoord0;
				float4 uv1 = v.texcoord1;

				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.ScreenPosition = ScreenPosition;
				o.uv0 = uv0;
				o.uv1 = uv1;

				o.clipPos = TransformObjectToHClip(v.vertex.xyz);
				return o;
			}

			half4 frag(VertexOutput IN) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

				// Pixel transformations performed by graph
				float3 WorldSpacePosition = IN.WorldSpacePosition;
				float3 WorldSpaceNormal = IN.WorldSpaceNormal;
				float3 WorldSpaceTangent = IN.WorldSpaceTangent;
				float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
				float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
				float4 ScreenPosition = IN.ScreenPosition;
				float4 uv0 = IN.uv0;
				float4 uv1 = IN.uv1;

				SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

				// Surface description inputs defined by graph
				surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
				surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
				surfaceInput.ScreenPosition = ScreenPosition;
				surfaceInput.uv0 = uv0;

				SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

				float3 Albedo = float3(0.5, 0.5, 0.5);
				float3 Emission = 0;
				float Alpha = 1;
				float AlphaClipThreshold = 0;

				// Surface description remap performed by graph
				Albedo = surf.Albedo;
				Emission = surf.Emission;
				Alpha = surf.Alpha;
				AlphaClipThreshold = surf.AlphaClipThreshold;

		 #if _AlphaClip
				clip(Alpha - AlphaClipThreshold);
		#endif
				return 0;
			}
			ENDHLSL
		}

			// This pass it not used during regular rendering, only for lightmap baking.
			Pass
			{
				Name "Meta"
				Tags{"LightMode" = "Meta"}

				Cull Off

				HLSLPROGRAM
				// Required to compile gles 2.0 with standard srp library
				#pragma prefer_hlslcc gles
				#pragma exclude_renderers d3d11_9x
				#pragma target 2.0

				#pragma vertex vert
				#pragma fragment frag

				float4 _MainTex_ST;

			// Defines generated by graph
			#define _NORMALMAP 1
			#define REQUIRE_DEPTH_TEXTURE

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/MetaInput.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			#pragma shader_feature _ _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A

				CBUFFER_START(UnityPerMaterial)
			float4 _WaterColorA;
			float4 _WaterColorB;
			float _WaterAlpha;
			float Vector1_45FDCCEB;
			float _NormalStrength;
			float _Smoothness;
			float _NormalSpeed;
			float2 _WaveDirectionA;
			float2 _WaveDirectionB;
			float2 _WaveTile;
			float _WaveScale;
			float _WaveSpeed;
			float _WaveStrength;
			float _FoamDistance;
			float _FoamStrength;
			float _Depth;
			float4 _DepthColor;
			CBUFFER_END

			TEXTURE2D(_NormalTex); SAMPLER(sampler_NormalTex); float4 _NormalTex_TexelSize;
			TEXTURE2D(_FoamTex); SAMPLER(sampler_FoamTex); float4 _FoamTex_TexelSize;
			SAMPLER(_SampleTexture2D_30715237_Sampler_3_Linear_Repeat);
			struct VertexDescriptionInputs
			{
				float3 ObjectSpacePosition;
				float3 WorldSpacePosition;
				float3 TimeParameters;
			};

			struct SurfaceDescriptionInputs
			{
				float3 WorldSpaceNormal;
				float3 WorldSpaceViewDirection;
				float4 ScreenPosition;
				half4 uv0;
			};


			void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
			{
				RGBA = float4(R, G, B, A);
				RGB = float3(R, G, B);
				RG = float2(R, G);
			}

			void Unity_Multiply_float(float2 A, float2 B, out float2 Out)
			{
				Out = A * B;
			}

			void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
			{
				Out = A / B;
			}

			void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
			{
				Out = UV * Tiling + Offset;
			}


		inline float Unity_SimpleNoise_RandomValue_float(float2 uv)
		{
			return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
		}

		inline float Unity_SimpleNnoise_Interpolate_float(float a, float b, float t)
		{
			return (1.0 - t) * a + (t * b);
		}


		inline float Unity_SimpleNoise_ValueNoise_float(float2 uv)
		{
			float2 i = floor(uv);
			float2 f = frac(uv);
			f = f * f * (3.0 - 2.0 * f);

			uv = abs(frac(uv) - 0.5);
			float2 c0 = i + float2(0.0, 0.0);
			float2 c1 = i + float2(1.0, 0.0);
			float2 c2 = i + float2(0.0, 1.0);
			float2 c3 = i + float2(1.0, 1.0);
			float r0 = Unity_SimpleNoise_RandomValue_float(c0);
			float r1 = Unity_SimpleNoise_RandomValue_float(c1);
			float r2 = Unity_SimpleNoise_RandomValue_float(c2);
			float r3 = Unity_SimpleNoise_RandomValue_float(c3);

			float bottomOfGrid = Unity_SimpleNnoise_Interpolate_float(r0, r1, f.x);
			float topOfGrid = Unity_SimpleNnoise_Interpolate_float(r2, r3, f.x);
			float t = Unity_SimpleNnoise_Interpolate_float(bottomOfGrid, topOfGrid, f.y);
			return t;
		}
			void Unity_SimpleNoise_float(float2 UV, float Scale, out float Out)
			{
				float t = 0.0;

				float freq = pow(2.0, float(0));
				float amp = pow(0.5, float(3 - 0));
				t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

				freq = pow(2.0, float(1));
				amp = pow(0.5, float(3 - 1));
				t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

				freq = pow(2.0, float(2));
				amp = pow(0.5, float(3 - 2));
				t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

				Out = t;
			}

			void Unity_Multiply_float(float A, float B, out float Out)
			{
				Out = A * B;
			}

			void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
			{
				Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
			}

			void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
			{
				Out = lerp(A, B, T);
			}

			void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
			{
				Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
			}

			void Unity_Subtract_float(float A, float B, out float Out)
			{
				Out = A - B;
			}

			void Unity_OneMinus_float(float In, out float Out)
			{
				Out = 1 - In;
			}

			void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
			{
				Out = A * B;
			}

			void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
			{
				Out = clamp(In, Min, Max);
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;

				float3 objectpos = IN.ObjectSpacePosition;
				float3 worldpos = IN.WorldSpacePosition;

				float4 _Combine_RGBA;
				float3 _Combine_RGB;
				float2 _Combine_RG;
				Unity_Combine_float(worldpos.x, worldpos.z, 0, 0, _Combine_RGBA, _Combine_RGB, _Combine_RG);//Unity_Combine_float(worldpos.x, worldpos.z, 0, 0, _Combine_RGBA, _Combine_RGB, _Combine_RG);

				float2 multi1 = float2(1, 1) * _Combine_RG;

				float2 multi2 = multi1 * _WaveTile;

				float2 multi3 = (IN.TimeParameters.x.xx) * float2(1, 0);

				float2 divide1 = multi3 / float2(20, 20);

				float2 multi4 = divide1 * float2(_WaveSpeed, _WaveSpeed);

				float2 tileout1 = multi2 * float2 (1, 1) + multi4;

				float simplenois1;
				Unity_SimpleNoise_float(tileout1, _WaveScale, simplenois1);

				float multi5 = simplenois1 * _WaveStrength;

				description.Position = float3(objectpos.x, multi5, objectpos.z);
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Emission;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float4 _Property_8A6FC900_Out_0 = _WaterColorA;
				float4 _Property_17EE01D5_Out_0 = _WaterColorB;
				float _FresnelEffect_4944DED2_Out_3;
				Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, 1, _FresnelEffect_4944DED2_Out_3);
				float4 _Lerp_4A644E6B_Out_3;
				Unity_Lerp_float4(_Property_8A6FC900_Out_0, _Property_17EE01D5_Out_0, (_FresnelEffect_4944DED2_Out_3.xxxx), _Lerp_4A644E6B_Out_3);
				float4 _SampleTexture2D_30715237_RGBA_0 = SAMPLE_TEXTURE2D(_FoamTex, sampler_FoamTex, IN.uv0.xy);
				float _SampleTexture2D_30715237_R_4 = _SampleTexture2D_30715237_RGBA_0.r;
				float _SampleTexture2D_30715237_G_5 = _SampleTexture2D_30715237_RGBA_0.g;
				float _SampleTexture2D_30715237_B_6 = _SampleTexture2D_30715237_RGBA_0.b;
				float _SampleTexture2D_30715237_A_7 = _SampleTexture2D_30715237_RGBA_0.a;
				float _SceneDepth_8C01628F_Out_1;
				Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_8C01628F_Out_1);
				float _Multiply_D0020014_Out_2;
				Unity_Multiply_float(_SceneDepth_8C01628F_Out_1, _ProjectionParams.z, _Multiply_D0020014_Out_2);
				float4 _ScreenPosition_5EA64279_Out_0 = IN.ScreenPosition;
				float _Split_DC81A435_R_1 = _ScreenPosition_5EA64279_Out_0[0];
				float _Split_DC81A435_G_2 = _ScreenPosition_5EA64279_Out_0[1];
				float _Split_DC81A435_B_3 = _ScreenPosition_5EA64279_Out_0[2];
				float _Split_DC81A435_A_4 = _ScreenPosition_5EA64279_Out_0[3];
				float _Property_64322247_Out_0 = _FoamDistance;
				float _Subtract_16D4CE39_Out_2;
				Unity_Subtract_float(_Split_DC81A435_A_4, _Property_64322247_Out_0, _Subtract_16D4CE39_Out_2);
				float _Subtract_B207AE67_Out_2;
				Unity_Subtract_float(_Multiply_D0020014_Out_2, _Subtract_16D4CE39_Out_2, _Subtract_B207AE67_Out_2);
				float _OneMinus_F58C9A96_Out_1;
				Unity_OneMinus_float(_Subtract_B207AE67_Out_2, _OneMinus_F58C9A96_Out_1);
				float _Property_526C56FE_Out_0 = _FoamStrength;
				float _Multiply_D4840389_Out_2;
				Unity_Multiply_float(_OneMinus_F58C9A96_Out_1, _Property_526C56FE_Out_0, _Multiply_D4840389_Out_2);
				float4 _Multiply_F6163FDB_Out_2;
				Unity_Multiply_float(_SampleTexture2D_30715237_RGBA_0, (_Multiply_D4840389_Out_2.xxxx), _Multiply_F6163FDB_Out_2);
				float4 _Clamp_78B0D50D_Out_3;
				Unity_Clamp_float4(_Multiply_F6163FDB_Out_2, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_78B0D50D_Out_3);
				float _Property_F2D00367_Out_0 = _WaterAlpha;
				surface.Albedo = (_Lerp_4A644E6B_Out_3.xyz);
				surface.Emission = (_Clamp_78B0D50D_Out_3.xyz);
				surface.Alpha = _Property_F2D00367_Out_0;
				surface.AlphaClipThreshold = 0.5;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord0 : TEXCOORD0;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct VertexOutput
			{
				float2 uv           : TEXCOORD0;
				float4 clipPos      : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				float4 ScreenPosition : TEXCOORD8;
				half4 uv0 : TEXCOORD9;
				half4 uv1 : TEXCOORD10;

				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			VertexOutput vert(GraphVertexInput v)
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				// Vertex transformations performed by graph
				float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
				float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
				float4 uv0 = v.texcoord0;
				float4 uv1 = v.texcoord1;
				float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;


				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.ScreenPosition = ScreenPosition;
				o.uv0 = uv0;
				o.uv1 = uv1;

				o.clipPos = MetaVertexPosition(v.vertex, uv1, uv1, unity_LightmapST, unity_DynamicLightmapST);
				return o;
			}

			half4 frag(VertexOutput IN) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

				// Pixel transformations performed by graph
				float3 WorldSpacePosition = IN.WorldSpacePosition;
				float3 WorldSpaceNormal = IN.WorldSpaceNormal;
				float3 WorldSpaceTangent = IN.WorldSpaceTangent;
				float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
				float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
				float4 ScreenPosition = IN.ScreenPosition;
				float4 uv0 = IN.uv0;
				float4 uv1 = IN.uv1;

				SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

				// Surface description inputs defined by graph
				surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
				surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
				surfaceInput.ScreenPosition = ScreenPosition;
				surfaceInput.uv0 = uv0;

				SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

				float3 Albedo = float3(0.5, 0.5, 0.5);
				float3 Emission = 0;
				float Alpha = 1;
				float AlphaClipThreshold = 0;

				// Surface description remap performed by graph
				Albedo = surf.Albedo;
				Emission = surf.Emission;
				Alpha = surf.Alpha;
				AlphaClipThreshold = surf.AlphaClipThreshold;

		 #if _AlphaClip
				clip(Alpha - AlphaClipThreshold);
		#endif

				MetaInput metaInput = (MetaInput)0;
				metaInput.Albedo = Albedo;
				metaInput.Emission = Emission;

				return MetaFragment(metaInput);
			}
			ENDHLSL
		}
		Pass
		{
			Tags{"LightMode" = "Lightweight2D"}

			// Material options generated by graph

			Blend One Zero, One Zero

			Cull Back

			ZTest LEqual

			ZWrite On

			HLSLPROGRAM
				// Required to compile gles 2.0 with standard srp library
				#pragma enable_d3d11_debug_symbols
				#pragma prefer_hlslcc gles
				#pragma exclude_renderers d3d11_9x
				#pragma target 2.0

				#pragma vertex vert
				#pragma fragment frag

				// Defines generated by graph
				#define _NORMALMAP 1
				#define REQUIRE_DEPTH_TEXTURE

				#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
				#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
				#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

				CBUFFER_START(UnityPerMaterial)
				float4 _WaterColorA;
				float4 _WaterColorB;
				float _WaterAlpha;
				float Vector1_45FDCCEB;
				float _NormalStrength;
				float _Smoothness;
				float _NormalSpeed;
				float2 _WaveDirectionA;
				float2 _WaveDirectionB;
				float2 _WaveTile;
				float _WaveScale;
				float _WaveSpeed;
				float _WaveStrength;
				float _FoamDistance;
				float _FoamStrength;
				float _Depth;
				float4 _DepthColor;
				CBUFFER_END

				TEXTURE2D(_NormalTex); SAMPLER(sampler_NormalTex); float4 _NormalTex_TexelSize;
				TEXTURE2D(_FoamTex); SAMPLER(sampler_FoamTex); float4 _FoamTex_TexelSize;
				SAMPLER(_SampleTexture2D_BC854478_Sampler_3_Linear_Repeat);
				SAMPLER(_SampleTexture2D_BB4FD43B_Sampler_3_Linear_Repeat);
				SAMPLER(_SampleTexture2D_30715237_Sampler_3_Linear_Repeat);
				struct VertexDescriptionInputs
				{
					float3 ObjectSpacePosition;
					float3 WorldSpacePosition;
					float3 TimeParameters;
				};

				struct SurfaceDescriptionInputs
				{
					float3 WorldSpaceNormal;
					float3 WorldSpaceViewDirection;
					float3 WorldSpacePosition;
					float4 ScreenPosition;
					half4 uv0;
					float3 TimeParameters;
				};


				void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
				{
					RGBA = float4(R, G, B, A);
					RGB = float3(R, G, B);
					RG = float2(R, G);
				}

				void Unity_Multiply_float(float2 A, float2 B, out float2 Out)
				{
					Out = A * B;
				}

				void Unity_Divide_float2(float2 A, float2 B, out float2 Out)
				{
					Out = A / B;
				}

				void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
				{
					Out = UV * Tiling + Offset;
				}


			inline float Unity_SimpleNoise_RandomValue_float(float2 uv)
			{
				return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
			}

			inline float Unity_SimpleNnoise_Interpolate_float(float a, float b, float t)
			{
				return (1.0 - t) * a + (t * b);
			}


			inline float Unity_SimpleNoise_ValueNoise_float(float2 uv)
			{
				float2 i = floor(uv);
				float2 f = frac(uv);
				f = f * f * (3.0 - 2.0 * f);

				uv = abs(frac(uv) - 0.5);
				float2 c0 = i + float2(0.0, 0.0);
				float2 c1 = i + float2(1.0, 0.0);
				float2 c2 = i + float2(0.0, 1.0);
				float2 c3 = i + float2(1.0, 1.0);
				float r0 = Unity_SimpleNoise_RandomValue_float(c0);
				float r1 = Unity_SimpleNoise_RandomValue_float(c1);
				float r2 = Unity_SimpleNoise_RandomValue_float(c2);
				float r3 = Unity_SimpleNoise_RandomValue_float(c3);

				float bottomOfGrid = Unity_SimpleNnoise_Interpolate_float(r0, r1, f.x);
				float topOfGrid = Unity_SimpleNnoise_Interpolate_float(r2, r3, f.x);
				float t = Unity_SimpleNnoise_Interpolate_float(bottomOfGrid, topOfGrid, f.y);
				return t;
			}
				void Unity_SimpleNoise_float(float2 UV, float Scale, out float Out)
				{
					float t = 0.0;

					float freq = pow(2.0, float(0));
					float amp = pow(0.5, float(3 - 0));
					t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

					freq = pow(2.0, float(1));
					amp = pow(0.5, float(3 - 1));
					t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

					freq = pow(2.0, float(2));
					amp = pow(0.5, float(3 - 2));
					t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x * Scale / freq, UV.y * Scale / freq)) * amp;

					Out = t;
				}

				void Unity_Multiply_float(float A, float B, out float Out)
				{
					Out = A * B;
				}

				void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
				{
					Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
				}

				void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
				{
					Out = lerp(A, B, T);
				}

				void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
				{
					Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
				}

				void Unity_NormalBlend_float(float3 A, float3 B, out float3 Out)
				{
					Out = normalize(float3(A.rg + B.rg, A.b * B.b));
				}

				void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
				{
					Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
				}

				void Unity_Subtract_float(float A, float B, out float Out)
				{
					Out = A - B;
				}

				void Unity_OneMinus_float(float In, out float Out)
				{
					Out = 1 - In;
				}

				void Unity_Multiply_float(float4 A, float4 B, out float4 Out)
				{
					Out = A * B;
				}

				void Unity_Clamp_float4(float4 In, float4 Min, float4 Max, out float4 Out)
				{
					Out = clamp(In, Min, Max);
				}

				struct VertexDescription
				{
					float3 Position;
				};

				VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
				{
					VertexDescription description = (VertexDescription)0;

					float3 objectpos = IN.ObjectSpacePosition;
					float3 worldpos = IN.WorldSpacePosition;

					float4 _Combine_RGBA;
					float3 _Combine_RGB;
					float2 _Combine_RG;
					Unity_Combine_float(worldpos.x, worldpos.z, 0, 0, _Combine_RGBA, _Combine_RGB, _Combine_RG);//Unity_Combine_float(worldpos.x, worldpos.z, 0, 0, _Combine_RGBA, _Combine_RGB, _Combine_RG);

					float2 multi1 = float2(1, 1) * _Combine_RG;

					float2 multi2 = multi1 * _WaveTile;

					float2 multi3 = (IN.TimeParameters.x.xx) * float2(1, 0);

					float2 divide1 = multi3 / float2(20, 20);

					float2 multi4 = divide1 * float2(_WaveSpeed, _WaveSpeed);

					float2 tileout1 = multi2 * float2 (1, 1) + multi4;

					float simplenois1;
					Unity_SimpleNoise_float(tileout1, _WaveScale, simplenois1);

					float multi5 = simplenois1 * _WaveStrength;

					description.Position = float3(objectpos.x, sin(IN.TimeParameters.x), objectpos.z);//multi5, objectpos.z);
					return description;
				}

				struct SurfaceDescription
				{
					float3 Albedo;
					float3 Normal;
					float3 Emission;
					float Metallic;
					float Smoothness;
					float Occlusion;
					float Alpha;
					float AlphaClipThreshold;
				};

				SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
				{
					SurfaceDescription surface = (SurfaceDescription)0;
					float4 _Property_8A6FC900_Out_0 = _WaterColorA;
					float4 _Property_17EE01D5_Out_0 = _WaterColorB;
					float _FresnelEffect_4944DED2_Out_3;
					Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, 1, _FresnelEffect_4944DED2_Out_3);
					float4 _Lerp_4A644E6B_Out_3;
					Unity_Lerp_float4(_Property_8A6FC900_Out_0, _Property_17EE01D5_Out_0, (_FresnelEffect_4944DED2_Out_3.xxxx), _Lerp_4A644E6B_Out_3);
					float _Split_7F747273_R_1 = IN.WorldSpacePosition[0];
					float _Split_7F747273_G_2 = IN.WorldSpacePosition[1];
					float _Split_7F747273_B_3 = IN.WorldSpacePosition[2];
					float _Split_7F747273_A_4 = 0;
					float4 _Combine_BE4ADA10_RGBA_4;
					float3 _Combine_BE4ADA10_RGB_5;
					float2 _Combine_BE4ADA10_RG_6;
					Unity_Combine_float(_Split_7F747273_R_1, _Split_7F747273_B_3, 0, 0, _Combine_BE4ADA10_RGBA_4, _Combine_BE4ADA10_RGB_5, _Combine_BE4ADA10_RG_6);
					float2 _Property_444566A2_Out_0 = _WaveDirectionA;
					float2 _Multiply_E060EDBD_Out_2;
					Unity_Multiply_float((IN.TimeParameters.x.xx), _Property_444566A2_Out_0, _Multiply_E060EDBD_Out_2);
					float _Vector1_3679FBC6_Out_0 = 20;
					float2 _Divide_4AB50D10_Out_2;
					Unity_Divide_float2(_Multiply_E060EDBD_Out_2, (_Vector1_3679FBC6_Out_0.xx), _Divide_4AB50D10_Out_2);
					float _Property_5236EDF7_Out_0 = _NormalSpeed;
					float2 _Multiply_98DBEBBA_Out_2;
					Unity_Multiply_float(_Divide_4AB50D10_Out_2, (_Property_5236EDF7_Out_0.xx), _Multiply_98DBEBBA_Out_2);
					float2 _TilingAndOffset_84F55EA2_Out_3;
					Unity_TilingAndOffset_float(_Combine_BE4ADA10_RG_6, float2 (1, 1), _Multiply_98DBEBBA_Out_2, _TilingAndOffset_84F55EA2_Out_3);
					float _Property_E05C4845_Out_0 = Vector1_45FDCCEB;
					float2 _Multiply_408990E1_Out_2;
					Unity_Multiply_float(_TilingAndOffset_84F55EA2_Out_3, (_Property_E05C4845_Out_0.xx), _Multiply_408990E1_Out_2);
					float4 _SampleTexture2D_BC854478_RGBA_0 = SAMPLE_TEXTURE2D(_NormalTex, sampler_NormalTex, _Multiply_408990E1_Out_2);
					_SampleTexture2D_BC854478_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_BC854478_RGBA_0);
					float _SampleTexture2D_BC854478_R_4 = _SampleTexture2D_BC854478_RGBA_0.r;
					float _SampleTexture2D_BC854478_G_5 = _SampleTexture2D_BC854478_RGBA_0.g;
					float _SampleTexture2D_BC854478_B_6 = _SampleTexture2D_BC854478_RGBA_0.b;
					float _SampleTexture2D_BC854478_A_7 = _SampleTexture2D_BC854478_RGBA_0.a;
					float _Property_6EB54AA1_Out_0 = _NormalStrength;
					float3 _NormalStrength_DCD69809_Out_2;
					Unity_NormalStrength_float((_SampleTexture2D_BC854478_RGBA_0.xyz), _Property_6EB54AA1_Out_0, _NormalStrength_DCD69809_Out_2);
					float2 _Property_7485F33C_Out_0 = _WaveDirectionB;
					float2 _Multiply_DFDF76C0_Out_2;
					Unity_Multiply_float((IN.TimeParameters.x.xx), _Property_7485F33C_Out_0, _Multiply_DFDF76C0_Out_2);
					float _Vector1_AFBF5595_Out_0 = 20;
					float2 _Divide_50267F81_Out_2;
					Unity_Divide_float2(_Multiply_DFDF76C0_Out_2, (_Vector1_AFBF5595_Out_0.xx), _Divide_50267F81_Out_2);
					float _Property_D1B4D721_Out_0 = _NormalSpeed;
					float2 _Multiply_60EFE6EB_Out_2;
					Unity_Multiply_float(_Divide_50267F81_Out_2, (_Property_D1B4D721_Out_0.xx), _Multiply_60EFE6EB_Out_2);
					float2 _TilingAndOffset_409BC33C_Out_3;
					Unity_TilingAndOffset_float(_Combine_BE4ADA10_RG_6, float2 (1, 1), _Multiply_60EFE6EB_Out_2, _TilingAndOffset_409BC33C_Out_3);
					float _Property_DC5C7F46_Out_0 = Vector1_45FDCCEB;
					float _Multiply_1C91C296_Out_2;
					Unity_Multiply_float(_Property_DC5C7F46_Out_0, 2, _Multiply_1C91C296_Out_2);
					float2 _Multiply_BA6D6D6B_Out_2;
					Unity_Multiply_float(_TilingAndOffset_409BC33C_Out_3, (_Multiply_1C91C296_Out_2.xx), _Multiply_BA6D6D6B_Out_2);
					float4 _SampleTexture2D_BB4FD43B_RGBA_0 = SAMPLE_TEXTURE2D(_NormalTex, sampler_NormalTex, _Multiply_BA6D6D6B_Out_2);
					_SampleTexture2D_BB4FD43B_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_BB4FD43B_RGBA_0);
					float _SampleTexture2D_BB4FD43B_R_4 = _SampleTexture2D_BB4FD43B_RGBA_0.r;
					float _SampleTexture2D_BB4FD43B_G_5 = _SampleTexture2D_BB4FD43B_RGBA_0.g;
					float _SampleTexture2D_BB4FD43B_B_6 = _SampleTexture2D_BB4FD43B_RGBA_0.b;
					float _SampleTexture2D_BB4FD43B_A_7 = _SampleTexture2D_BB4FD43B_RGBA_0.a;
					float3 _NormalStrength_215C196F_Out_2;
					Unity_NormalStrength_float((_SampleTexture2D_BB4FD43B_RGBA_0.xyz), _Property_6EB54AA1_Out_0, _NormalStrength_215C196F_Out_2);
					float3 _NormalBlend_2B6FCAA7_Out_2;
					Unity_NormalBlend_float(_NormalStrength_DCD69809_Out_2, _NormalStrength_215C196F_Out_2, _NormalBlend_2B6FCAA7_Out_2);
					float4 _SampleTexture2D_30715237_RGBA_0 = SAMPLE_TEXTURE2D(_FoamTex, sampler_FoamTex, IN.uv0.xy);
					float _SampleTexture2D_30715237_R_4 = _SampleTexture2D_30715237_RGBA_0.r;
					float _SampleTexture2D_30715237_G_5 = _SampleTexture2D_30715237_RGBA_0.g;
					float _SampleTexture2D_30715237_B_6 = _SampleTexture2D_30715237_RGBA_0.b;
					float _SampleTexture2D_30715237_A_7 = _SampleTexture2D_30715237_RGBA_0.a;
					float _SceneDepth_8C01628F_Out_1;
					Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_8C01628F_Out_1);
					float _Multiply_D0020014_Out_2;
					Unity_Multiply_float(_SceneDepth_8C01628F_Out_1, _ProjectionParams.z, _Multiply_D0020014_Out_2);
					float4 _ScreenPosition_5EA64279_Out_0 = IN.ScreenPosition;
					float _Split_DC81A435_R_1 = _ScreenPosition_5EA64279_Out_0[0];
					float _Split_DC81A435_G_2 = _ScreenPosition_5EA64279_Out_0[1];
					float _Split_DC81A435_B_3 = _ScreenPosition_5EA64279_Out_0[2];
					float _Split_DC81A435_A_4 = _ScreenPosition_5EA64279_Out_0[3];
					float _Property_64322247_Out_0 = _FoamDistance;
					float _Subtract_16D4CE39_Out_2;
					Unity_Subtract_float(_Split_DC81A435_A_4, _Property_64322247_Out_0, _Subtract_16D4CE39_Out_2);
					float _Subtract_B207AE67_Out_2;
					Unity_Subtract_float(_Multiply_D0020014_Out_2, _Subtract_16D4CE39_Out_2, _Subtract_B207AE67_Out_2);
					float _OneMinus_F58C9A96_Out_1;
					Unity_OneMinus_float(_Subtract_B207AE67_Out_2, _OneMinus_F58C9A96_Out_1);
					float _Property_526C56FE_Out_0 = _FoamStrength;
					float _Multiply_D4840389_Out_2;
					Unity_Multiply_float(_OneMinus_F58C9A96_Out_1, _Property_526C56FE_Out_0, _Multiply_D4840389_Out_2);
					float4 _Multiply_F6163FDB_Out_2;
					Unity_Multiply_float(_SampleTexture2D_30715237_RGBA_0, (_Multiply_D4840389_Out_2.xxxx), _Multiply_F6163FDB_Out_2);
					float4 _Clamp_78B0D50D_Out_3;
					Unity_Clamp_float4(_Multiply_F6163FDB_Out_2, float4(0, 0, 0, 0), float4(1, 1, 1, 1), _Clamp_78B0D50D_Out_3);
					float _Property_8427BE3_Out_0 = _Smoothness;
					float _Property_F2D00367_Out_0 = _WaterAlpha;
					surface.Albedo = (_Lerp_4A644E6B_Out_3.xyz);
					surface.Normal = _NormalBlend_2B6FCAA7_Out_2;
					surface.Emission = (_Clamp_78B0D50D_Out_3.xyz);
					surface.Metallic = 0;
					surface.Smoothness = _Property_8427BE3_Out_0;
					surface.Occlusion = 1;
					surface.Alpha = _Property_F2D00367_Out_0;
					surface.AlphaClipThreshold = 0.5;
					return surface;
				}

				struct GraphVertexInput
				{
					float4 vertex : POSITION;
					float3 normal : NORMAL;
					float4 tangent : TANGENT;
					float4 texcoord0 : TEXCOORD0;
					float4 texcoord1 : TEXCOORD1;
					UNITY_VERTEX_INPUT_INSTANCE_ID
				};


				struct GraphVertexOutput
				{
					float4 clipPos                : SV_POSITION;
					// Interpolators defined by graph
					float3 WorldSpacePosition : TEXCOORD3;
					float3 WorldSpaceNormal : TEXCOORD4;
					float3 WorldSpaceTangent : TEXCOORD5;
					float3 WorldSpaceBiTangent : TEXCOORD6;
					float3 WorldSpaceViewDirection : TEXCOORD7;
					float4 ScreenPosition : TEXCOORD8;
					half4 uv0 : TEXCOORD9;
					half4 uv1 : TEXCOORD10;

				};

				GraphVertexOutput vert(GraphVertexInput v)
				{
					GraphVertexOutput o = (GraphVertexOutput)0;

					VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

					float3 WorldSpacePosition = mul(UNITY_MATRIX_M, v.vertex).xyz;
					// Vertex description inputs defined by graph
					vdi.ObjectSpacePosition = v.vertex.xyz;
					vdi.WorldSpacePosition = WorldSpacePosition;//WorldSpacePosition;
					vdi.TimeParameters = _TimeParameters.xyz;

					VertexDescription vd = PopulateVertexData(vdi);
					v.vertex.xyz = vd.Position;

					// Vertex transformations performed by graph
					float3 WorldSpaceNormal = normalize(mul(v.normal, (float3x3)UNITY_MATRIX_I_M));
					float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M, v.tangent.xyz));
					float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
					float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
					float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
					float4 uv0 = v.texcoord0;
					float4 uv1 = v.texcoord1;

					// Vertex shader outputs defined by graph
					o.WorldSpacePosition = WorldSpacePosition;
					o.WorldSpaceNormal = WorldSpaceNormal;
					o.WorldSpaceTangent = WorldSpaceTangent;
					o.WorldSpaceBiTangent = WorldSpaceBiTangent;
					o.WorldSpaceViewDirection = WorldSpaceViewDirection;
					o.ScreenPosition = ScreenPosition;
					o.uv0 = uv0;
					o.uv1 = uv1;


					VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
					o.clipPos = vertexInput.positionCS;

					return o;
				}

				half4 frag(GraphVertexOutput IN) : SV_Target
				{
					// Pixel transformations performed by graph
					float3 WorldSpacePosition = IN.WorldSpacePosition;
					float3 WorldSpaceNormal = IN.WorldSpaceNormal;
					float3 WorldSpaceTangent = IN.WorldSpaceTangent;
					float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
					float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
					float4 ScreenPosition = IN.ScreenPosition;
					float4 uv0 = IN.uv0;
					float4 uv1 = IN.uv1;

					SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

					// Surface description inputs defined by graph
					surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
					surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
					surfaceInput.WorldSpacePosition = WorldSpacePosition;
					surfaceInput.ScreenPosition = ScreenPosition;
					surfaceInput.uv0 = uv0;
					surfaceInput.TimeParameters = _TimeParameters.xyz;

					SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

					float3 Albedo = float3(0.5, 0.5, 0.5);
					float3 Specular = float3(0, 0, 0);
					float Metallic = 1;
					float3 Normal = float3(0, 0, 1);
					float3 Emission = 0;
					float Smoothness = 0.5;
					float Occlusion = 1;
					float Alpha = 1;
					float AlphaClipThreshold = 0;

					// Surface description remap performed by graph
					Albedo = surf.Albedo;
					Normal = surf.Normal;
					Emission = surf.Emission;
					Metallic = surf.Metallic;
					Smoothness = surf.Smoothness;
					Occlusion = surf.Occlusion;
					Alpha = surf.Alpha;
					AlphaClipThreshold = surf.AlphaClipThreshold;


					// Computes fog factor per-vertex
					half4 color = half4(Albedo, Alpha);

			#if _AlphaClip
					clip(Alpha - AlphaClipThreshold);
			#endif
					return color;
				}

				ENDHLSL
			}
	}
		CustomEditor "UnityEditor.ShaderGraph.PBRMasterGUI"
					FallBack "Hidden/InternalErrorShader"
}
